package edu.utdallas.mektek.polycraftapp;

import java.io.File;
import java.util.ArrayList;

/**
 * Author:  Carla Vazquez
 * Date:    11/8/17
 * Version: 1.0
 * Recipe - a class that extends SuperNode and is used to hold inventory information
 */

public class Recipe extends SuperNode {
    private String inventory;                    //a String object to hold the type of inventory the Recipe is
    private ArrayList<Integer> childQuantities;  //an Integer ArrayList to hold the quantities of each child required in the Recipe
    private ArrayList<Integer> parentQuantities; //an Integer ArrayList to hold the quantities of each parent required in the Recipe
    private int height;                          //an int to hold the height of the Recipe in the tree
    
    //parent is polycraft output
    //child is polycraft input

    /**
     * Recipe constructor
     * @param in takes the inventory of the Recipe
     * @param id takes an id value for the Recipe node
     * @param par takes an array list of parent nodes for the Recipe node
     * @param child takes an array list of child nodes for the Recipe node
     * @param img takes the image name as a String for the Recipe node
     * @param parQ takes an Integer ArrayList of the quantities of the parent nodes
     * @param chiQ takes an Integer ArrayList of the quantities of the child nodes
     */
    public Recipe(String in, String id, ArrayList<SuperNode> par, ArrayList<SuperNode> child,
    		File img, ArrayList<Integer> parQ, ArrayList<Integer> chiQ){
        super(id, par, child, img);
        childQuantities = chiQ;
        parentQuantities = parQ;
        this.inventory = in;
    }

    /**
     * toString
     * @return the first child of the Recipe
     */
    @Override
    public String toString() {
        return children.get(0).toString();
    }

    /**
     * getId
     * @return nodeId - the id specific to the Recipe
     */
    @Override
    public String getId() {
        return nodeId;
    }

    /**
     * getParents
     * @return parents - a SuperNode ArrayList containing all the outputs generated by the Recipe
     */
    @Override
    public ArrayList<SuperNode> getParents() {
        return parents;
    }

    /**
     * getChildren
     * @return children - a SuperNode ArrayList containing all the inputs the Recipe needs
     */
    @Override
    public ArrayList<SuperNode> getChildren() {
        return children;
    }

    /**
     * getImage
     * @return image - a String object containing the name of the image
     */
    @Override
    public File getImage() {
        return image;
    }

    /**
     * getName
     * @return inventory - a String object detailing the inventory used s.a. distillation
     */
    @Override
    public String getName(){
        return inventory;
    }

    /**
     * setParents
     * @param par - an ArrayList of SuperNodes that it sets equal to the private variable parents
     */
    @Override
    public void setParents(ArrayList<SuperNode> par) {
        this.parents = par;
    }

    /**
     * setChildren
     * @param chi - an ArrayList of SuperNodes that it sets equal to the private variable children
     */
    @Override
    public void setChildren(ArrayList<SuperNode> chi){
        this.children = chi;
    }

    /**
     * search
     * @param id - the id of one of the SuperNodes contained in the Recipe
     * @return the SuperNode the id corresponds to
     */
    @Override
    public SuperNode search(String id) {
        if (this.getId().equals(id)) {
            return this;
        }
        else{
           for (SuperNode par : this.getParents()){
               if(par.getName().equals(id)){
                   return par;
               }
           }

            return this.getChildren().get(0).search(id);
        }
    }

    /**
     * setHeight
     * sets the height of the Recipe node and all of the Recipe node's parents
     * @param h - an int representing the height of the node
     */
    @Override
    public void setHeight(int h) {
        height=h;
        for (int i=0;i<parents.size();i++){
            parents.get(i).setHeight(height);
        }
    }

    /**
     * getHeight
     * @return height - an int representing the height of the Recipe node
     */
    @Override
    public int getHeight(){
        return height;
    }

    /**
     * getInventory
     * @return inventory - a String object holding the type of inventory
     */
    public String getInventory() {
        return inventory;
    }

    /**
     * getChildQuantities
     * @return childQuantities - an ArrayList of Integers holding the quantities of each child
     */
    public ArrayList<Integer> getChildQuantities(){ return childQuantities; }

    /**
     * getParentQuantities
     * @return parentQuantities - an ArrayList of Integers holding the quantities of each parent
     */
    public ArrayList<Integer> getParentQuantities(){ return parentQuantities; }

    /**
     * getFileNamePath
     * gets the png asset for a given node; used to display image on tree
     * @return String - asset path name
     */
    public String getFileNamePath(){
        String pngFileName = this.getImage().getName();
        String[] pngArray = pngFileName.split("File:");
        String assetName = pngArray[1].toLowerCase();
        return assetName;
    }
}
